let ckt = load_exe "OneHotCodeILvtMultiPortMemory16.exe";
load "../trajEval.fl";
load "../tools.fl";

let M = 2;          //write port number
let N = 2;          //read port number
let Addr = 4;       //address size
let Depth = 2**4;   //memory depth
let Width=8;        //data size

//write mutex signal and write memory definition
//k    : k-th write port(0<= k < m)
//i    : i-th block of (m-1) feedback-read-mem-blocks(0<= i < m-1)
//adr  : write address
//m    : total write port number
//n    : total read port number
//width: data size
let MutexW k i adr m n = map (\a. "Memory" ^ ((k*(m-1)+i=0) => "" | ("_"^(int2str (k*(m-1)+i))))
                                        ^".mem<" ^ (int2str adr) ^ "><" ^ (int2str a) ^ ">") (0 upto (m-2))
;

let MemoryW k i adr m n width= map (\a. "Memory" ^ ((k*(m-1)+i=0) => "" | ("_"^(int2str (k*(m-1)+i))))
                                        ^".mem<" ^ (int2str adr) ^ "><" ^ (int2str a) ^ ">") (m-1 upto (m+width-2))
;

//symbolic values
let muxW k adr m n = map (\a. bvariable ("muxW<" ^ (int2str k) 
                                 ^"><" ^ (int2str adr) ^ "><" ^ (int2str a) ^ ">")) (0 upto (m-2))
;

let memW k adr m n width = map (\a. bvariable ("memW<" ^ (int2str k) 
                                 ^"><" ^ (int2str adr) ^ "><" ^ (int2str a) ^ ">")) (m-1 upto (m+width-2))
;

//read mutex signal and read memory definition
//k    : k-th write port(0<= k < m)
//j    : j-th read port / j-th block of n read-mem-blocks of a write-port(0<= j <n)
//adr  : read address
//m    : total write port number
//n    : total read port number
//width: data size
let MutexR k j adr m n = map (\a. "Memory_" ^ (int2str (m*(m-1) + k*n + j)) ^ ".mem<" ^ (int2str adr) ^ "><" ^ (int2str a) ^ ">") (0 upto (m-2)) // (m-1) bits for mutex
;

let MemoryR k j adr m n width= map (\a. "Memory_" ^ (int2str (m*(m-1) + k*n + j)) ^ ".mem<" ^ (int2str adr) ^ "><" ^ (int2str a) ^ ">") (m-1 upto (m+width-2))
;
//symbolic values
let muxR k adr m n = map (\a. bvariable ("muxR<" ^ (int2str k) 
                                 ^"><" ^ (int2str adr) ^ "><" ^ (int2str a) ^ ">")) (0 upto (m-2))
;

let memR k adr m n width = map (\a. bvariable ("memR<" ^ (int2str k) 
                                 ^"><" ^ (int2str adr) ^ "><" ^ (int2str a) ^ ">")) (m-1 upto (m+width-2))
;

//write enable signals
let we i = "io_wrEna_" ^ (int2str i);

let wrEna k =
    let terms = map (\i. (i=k)=> Is1 ("io_wrEna_" ^ (int2str i)) | Is0 ("io_wrEna_" ^ (int2str i))) (0 upto (M-1)) 
    in
    TAndList terms
;


let nwrEnaAll =  TAndList (map (\i. Is0 ("io_wrEna_" ^ (int2str i))) (0 upto (M-1))) ;

let wrEnaAll =  TAndList (map (\i. Is1 ("io_wrEna_" ^ (int2str i))) (0 upto (M-1))) ;

//nodes
let wraddr i = map (\j. "io_wrAddr_"^(int2str i) ^ "<" ^ (int2str j) ^ ">") (0 upto (Addr-1)); //write on write-port i
let rdaddr i = map (\j. "io_rdAddr_"^(int2str i) ^ "<" ^ (int2str j) ^ ">") (0 upto (Addr-1)); //read on read-port i
let wrdata i = map (\j. "io_wrData_"^(int2str i) ^ "<" ^ (int2str j) ^ ">") (0 upto (Width-1));
let rddata i = map (\j. "io_rdData_"^(int2str i) ^ "<" ^ (int2str j) ^ ">") (0 upto (Width-1));
let we i = "io_wrEna_"^(int2str i);//write enable on port i
//symbolic constants
let ain i = map (\j. bvariable ("ain*" ^ (int2str i) ^ "*" ^ (int2str j) ^ "*")) (0 upto (Addr-1)); 
let ains = map (\i. (ain i)) (0 upto (M-1));
let din i = map (\j. bvariable ("din*" ^ (int2str i) ^ "*" ^ (int2str j) ^ "*")) (0 upto (Width-1));
let dins = map (\i. (din i)) (0 upto (M-1));
let aout i = map (\j. bvariable ("aout*" ^ (int2str i) ^ "*" ^ (int2str j) ^ "*")) (0 upto (Addr-1));
let aouts = map (\i. (aout i)) (0 upto (N-1));
let dout i = map (\j. bvariable ("dout*" ^ (int2str i) ^ "*" ^ (int2str j) ^ "*")) (0 upto (Width-1));
let douts = map (\i. (dout i)) (0 upto (N-1));
let wev i = bvariable ("wev*" ^ (int2str i));

let muxwUnit i j a = MutexW i j a M N;
let memwUnit i j a = MemoryW i j a M N Width;
let muxwV i a = muxW i a M N;
let memwV i a = memW i a M N Width;
let muxwCell k j a i =  el (i+1) (muxwUnit k j a);
let muxwCellV k a i =  el (i+1) (muxwV k a);

let muxrUnit i j a = MutexR i j a M N;
let memrUnit i j a = MemoryR i j a M N Width;
let muxrV i a = muxR i a M N;
let memrV i a = memR i a M N Width;
let muxrCell k j a i =  el (i+1) (muxrUnit k j a);
let muxrCellV k a i =  el (i+1) (muxrV k a);

//basic assertions
let clk2 = TAndList [Is0 "CLK", Next (Is1 "CLK")];
let clk4 = TAndList [Is0 "CLK", Next (Is1 "CLK"), Next (Next (Is0 "CLK")), Next (Next (Next (Is1 "CLK")))];
let rst = Is1 "reset";
let nrst = Is0 "reset";
let memwAntAssertNoK k adr = (TAndList (flat (map (\i. 
                                ( map (\j.(muxwUnit i j adr) bvAre (muxwV i adr)) (0 upto (M-2)))
                            ) (filter (\m. m!=k) (0 upto (M-1))))))
;
let memrAntAssertNoK k adr = (TAndList (flat (map (\i. 
                                ( map (\j. (muxrUnit i j adr) bvAre (muxrV i adr)) (0 upto (N-1)))
                            ) (filter (\i. i!=k) (0 upto (M-1))))))
;

//k: write-port, adr:write-address, i: mutex-position(0<=i<(m-1)), j: feedback-block-index(0<=j<(m-1)), correspond to paper def
let muxwAssert k adr = 
    let cellValAti i = (i<k => bNOT (muxwCellV i adr (k-1)) | (muxwCellV (i+1) adr k)) in
    let assertOnBlockj j = TAndList (map (\i. Isb  (cellValAti i) (muxwCell k j adr i)) (0 upto (M-2))) in
    TAndList (map (\j. assertOnBlockj j) (0 upto (M-2)))
;

//k: write-port, adr:write-address, i: mutex-position(0<=i<(m-1)), j: feedback-block-index(0<=j<(m-1)), correspond to paper def
let muxrAssert k adr = 
    let cellValAti i = (i<k => bNOT (muxrCellV i adr (k-1)) | (muxrCellV (i+1) adr k)) in
    let assertOnBlockj j = TAndList (map (\i. Isb  (cellValAti i) (muxrCell k j adr i)) (0 upto (M-2))) in
    TAndList (map (\j. assertOnBlockj j) (0 upto (N-1)))
;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//edge 0->1 (write on port K, address adr)
//test all (M-1) feedback write blocks and all (N) read blocks related to write-port K
let assert1 nonce=
    //statistics
    let adrCases = (extract M (0 upto (Depth-1))) in
    let casesLen = length adrCases in
    //symbolic indexing variables
    let ider = map (\i. bvariable ("ider" ^ (int2str i))) (0 upto (log2 (casesLen))) in
    let memAnt = TAndList (
        map2
        (\n.\as. Guard (ider indexIs n) (TAndList (flat (map2 (\i.\a. [(wraddr i) nodeIs a, memwAntAssertNoK i a, memrAntAssertNoK i a]) (0 upto (M-1)) as))))
        (0 upto (casesLen-1)) adrCases
    )
    in
    let wdatAnt = TAndList (map (\i. (wrdata i) bvAre (din i)) (0 upto (M-1))) in
    let memwCons i a = TAndList (map (\j. (memwUnit i j a) bvAre (din i)) (0 upto (M-2))) in
    let memrCons i a = TAndList (map (\j. (memrUnit i j a) bvAre (din i)) (0 upto (N-1))) in
    let Cons = TAndList (
        map2 
        (\n.\as. Guard (ider indexIs n) (TAndList (flat (map2 (\i.\a. [memwCons i a, memrCons i a, muxwAssert i a, muxrAssert i a]) (0 upto (M-1)) as))))
        (0 upto (casesLen-1)) adrCases
    )
    in
    //antecedent and consequent
    let ant_t = TAndList [memAnt, Next (memAnt), Next (Next (memAnt)),
                        wrEnaAll, Next (wrEnaAll), Next (Next (wrEnaAll)),
                        wdatAnt, Next (wdatAnt), Next (Next (wdatAnt)), 
                        nrst, Next (nrst), Next (Next (nrst)),
                        clk4] in
    let cons_t = Next (Next (Next Cons)) in
    let ant = trajForm2FiveTuples ant_t in
    let cons = trajForm2FiveTuples cons_t in
    let cnstr1 = flat (map (\wp. 
                        (map (\a. 
                                bEqs (memwV wp a) (memrV wp a)) 
                        (0 upto (Depth-1))))
                    (0 upto (M-1))
                )
    in
    let cnstr2 = flat (map (\wp. 
                        (map (\a. 
                                bEqs (muxwV wp a) (muxrV wp a)) 
                        (0 upto (Depth-1))))
                    (0 upto (M-1))
                )
    in
    uSTE "" ckt [] ant cons [] (cnstr1@cnstr2) => T | F 
;

let assert2 nonce =
    //statistics
    let adrCases = (extract M (0 upto (Depth-1))) in
    let casesLen = length adrCases in
    //symbolic indexing variables
    let ider = map (\i. bvariable ("ider" ^ (int2str i))) (0 upto (log2 (casesLen))) in
    let memwAntAssert adr = TAndList (flat (map (\i. 
                                    ( map (\j. TAndList [(memwUnit i j adr) bvAre (memwV i adr),
                                                        (muxwUnit i j adr) bvAre (muxwV i adr)]
                                    ) (0 upto (M-2)))
                                ) (0 upto (M-1))))
    in
    let memrAntAssert adr = TAndList (flat (map (\i. 
                                    ( map (\j. TAndList [(memrUnit i j adr) bvAre (memrV i adr),
                                                        (muxrUnit i j adr) bvAre (muxrV i adr)]
                                    ) (0 upto (N-1)))
                                ) (0 upto (M-1))))
    in
    let memwConsAssert adr = TAndList (flat (map (\i. 
                                    ( map (\j. TAndList [(memwUnit i j adr) bvAre (memwV i adr),
                                                        (muxwUnit i j adr) bvAre (muxwV i adr)]
                                    ) (0 upto (M-2)))
                                ) (0 upto (M-1))))
    in
    let memrConsAssert adr = TAndList (flat (map (\i. 
                                    ( map (\j. TAndList [(memrUnit i j adr) bvAre (memrV i adr),
                                                        (muxrUnit i j adr) bvAre (muxrV i adr)]
                                    ) (0 upto (N-1)))
                                ) (0 upto (M-1))))
    in
    let memAnt = TAndList (
        map2 
        (\n.\as. Guard (ider indexIs n) (TAndList (flat (map2 (\i.\a. [memwAntAssert a, memrAntAssert a]) (0 upto (M-1)) as))))
        (0 upto (casesLen-1)) adrCases
    )
    in
    let memCons = TAndList (
        map2 
        (\n.\as. Guard (ider indexIs n) (TAndList (flat (map2 (\i.\a. [memwConsAssert a, memrConsAssert a]) (0 upto (M-1)) as))))
        (0 upto (casesLen-1)) adrCases
    )
    in
    //no-write and write-address constraint
    let eaAssert = TAndList (map (\i. TAndList [Isb (wev i) (we i), (wraddr i) bvAre (ain i)]) (0 upto (M-1))) in
    //ants and cons
    let ant_t = TAndList [memAnt, nrst, Next (nrst), eaAssert, Next (eaAssert), clk2] in
    let cons_t = Next (memCons) in
    let ant = trajForm2FiveTuples ant_t in
    let cons = trajForm2FiveTuples cons_t in
    let cnstr_EA = ands(
        map2 
        (\n.\as. imply (ider indexIs n) (ands (map2 (\i.\a. (bNOT (wev i)) bOR (ands (map (\e. bNOT ((ain i) indexIs e)) as))) (0 upto (M-1)) as)))
        (0 upto (casesLen-1)) adrCases
    ) 
    in 
    uSTE "" ckt [] ant cons [] [cnstr_EA] => T | F 
;

let assert3 nonce = 
    //statistics
    let adrCases = (extract M (0 upto (Depth-1))) in
    let casesLen = length adrCases in
    //symbolic indexing variables
    let ider = map (\i. bvariable ("ider" ^ (int2str i))) (0 upto (log2 (casesLen))) in
    let memrAntAssert i adr = TAndList (map (\j. (memrUnit i j adr) bvAre (din i) ) (0 upto (N-1))) in
    let muxrAntAssert adr = (TAndList (flat (map (\i. 
                                    (map (\j. (muxrUnit i j adr) bvAre (muxrV i adr)) (0 upto (N-1)))
                                ) (0 upto (M-1)))))
    in
    let memAnt = TAndList (
        map2 
        (\n.\as. Guard (ider indexIs n) (TAndList (flat (map2 (\i.\a. [memrAntAssert i a, muxrAntAssert a]) (0 upto (M-1)) as))))
        (0 upto (casesLen-1)) adrCases
    )
    in
    let radrAnt = TAndList (map (\j. (rdaddr j) bvAre (aout j)) (0 upto (N-1))) in
    let rdatCons = TAndList (
       map2
       (\n.\as. Guard (ider indexIs n) (TAndList (
            map
            (\j. TAndList (map2 (\i.\a. Guard ((aout j) indexIs a) ((rddata j) bvAre (din i))) (0 upto (M-1)) as))
            (0 upto (N-1))
       )))
       (0 upto (casesLen-1)) adrCases
    )
    in
    //antecedent and consequent
    let ant_t = TAndList [memAnt, Next (memAnt), 
                        radrAnt, Next (radrAnt), 
                        nwrEnaAll, Next (nwrEnaAll),
                        nrst, Next (nrst), 
                        clk2] in
    let cons_t =Next (rdatCons) in
    let ant = trajForm2FiveTuples ant_t in
    let cons = trajForm2FiveTuples cons_t in
    //constraints
    let rcellValAti wp adr t = (t<wp => bNOT (muxrCellV t adr (wp-1)) | (muxrCellV (t+1) adr wp)) in
    let cnstr = ands (
        map2 
        (\n.\as. imply (ider indexIs n) (ands (map2 (\i.\a. 
            ands (map (\t. ands [bEq (muxrCellV i a t) (rcellValAti i a t) , bEq (muxrCellV i a t) bF]) (0 upto (M-2)))
            ) (0 upto (M-1)) as)))
        (0 upto (casesLen-1)) adrCases
    )
    in
    uSTE "" ckt [] ant cons [] [cnstr] => T | F 
;

assert3 1;
quit;
